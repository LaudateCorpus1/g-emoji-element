#!/usr/bin/env node

// Generates the modifiers.js module with a list of emoji that support
// skin tone modifiers.
//
// When new emoji are published in updated Unicode versions:
//
// 1. Add the emoji to muan/emojilib and publish a release
// 2. npm update emojilib
// 3. npm run generate-emoji
// 4. git commit -am "Update emoji list"

const emojis = require('emojilib').lib

const pluck = key => obj => obj[key]
const isFitzpatrick = pluck('fitzpatrick_scale')
const emoji = pluck('char')
const codepoints = text => [...text].map(ch => ch.codePointAt(0))
const hex = points => [...points].map(num => `0x${num.toString(16)}`)
const string = hexArray => `[${[...hexArray].join(',')}]`

const points = new Set(
  Object.values(emojis)
    .filter(isFitzpatrick)
    .map(emoji)
    .map(codepoints)
    .map(hex)
    .map(string)
)

const script = `
// Generated by script/generate-emoji-modifiers.
// You MUST commit any modifications to this file.

/* @flow strict */

const points = new Set([
  ${[...points].sort().join(',')}
].map(arr => arr.join(',')))

const ZERO_WIDTH_JOINER = '\u{200d}'
const VARIATION_16 = String.fromCodePoint(0xfe0f)
const GENDER_M = String.fromCodePoint(9794)
const GENDER_F = String.fromCodePoint(9792)
const regex = new RegExp(\`\${GENDER_M}|\${GENDER_F}|\${ZERO_WIDTH_JOINER}|\${VARIATION_16}\`, 'g')

function codePoints(emoji) {
  return [...emoji].map(ch => ch.codePointAt(0)).join(',')
}

export function isModifiable(emoji: string): boolean {
  const sanitizedCodePoints = codePoints(emoji.replace(regex, ''))
  const fullCodePoints = codePoints(emoji)
  return points.has(fullCodePoints) || points.has(sanitizedCodePoints)
}
`

console.log(script)
